{"version":3,"sources":["state.ts","saga.ts","store.ts","Radio.tsx","theme.ts","Layout.ts","Text.ts","Transaction.tsx","Transactions.tsx","Balance.tsx","Overdraft.tsx","Chart.tsx","BalanceChart.tsx","Button.tsx","AddTransaction.tsx","Account.tsx","App.tsx","index.tsx"],"names":["transactionTypes","transactionFilters","selectTransactionsLatestToOldest","createSelector","s","transactions","Object","values","sort","a","b","date","selectFilteredTransactions","transactionFilter","filter","transaction","type","selectBalance","reduce","balance","value","selectOverdraft","state","overdraft","selectBalancesByTime","Array","fill","map","_","i","group","format","Date","subDays","total","reverse","rootSaga","handleTransaction","takeLatest","payload","select","put","reason","call","alert","id","uuid","sagaMiddleware","createSagaMiddleware","persistedReducer","persistReducer","key","storage","action","produce","next","store","createStore","applyMiddleware","persistor","persistStore","useTypedSelector","useSelector","useTypedDispatch","useDispatch","run","start","Radio","checked","label","onClick","style","flexDirection","justifyContent","padding","alignItems","htmlFor","paddingRight","onChange","theme","Max","styled","div","CentredMax","Space","Text","span","level","getTextColor","getFontSize","TransactionDisplay","Container","TransactionDate","formatDistanceToNow","addSuffix","toFixed","Transactions","transactionClicked","useMeasure","polyfill","ResizeObserver","ref","width","height","TransactionsFilter","flex","overflow","length","itemCount","itemSize","index","borderBottomColor","borderBottomWidth","dispatch","activeFilter","Balance","balanceSpring","useSpring","from","config","clamp","interpolate","x","Overdraft","Chart","React","memo","data","scaleX","scaleLinear","range","domain","scaleY","extent","areaFn","area","step","x1","y","y1","curve","d","viewBox","x2","y2","offset","stopColor","path","stroke","strokeWidth","BalanceChart","Button","button","initialValues","startOfDay","AddTransaction","isOpen","open","toggle","position","bottom","background","backdropFilter","transform","color","onSubmit","handleSubmit","TypePicker","DatePicker","name","min","max","useField","field","helpers","e","setValue","target","display","Account","App","loading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a923752c.chunk.js","sourcesContent":["import produce from \"immer\";\nimport { createSelector } from \"reselect\";\nimport { subDays, format } from \"date-fns\";\n\nexport type Action =\n  | {\n      type: \"transaction clicked in list\";\n      payload: {\n        transaction: Transaction;\n      };\n    }\n  | {\n      type: \"transaction filter changed\";\n      payload: TransactionView;\n    }\n  | {\n      type: \"add transaction form submitted\";\n      payload: { transaction: Omit<Transaction, \"id\"> };\n    }\n  | {\n      type: \"transaction confirmed (saga)\";\n      payload: { transaction: Transaction };\n    }\n  | {\n      type: \"transaction rejected (saga)\";\n      payload: {\n        reason: string;\n      };\n    };\n\nexport const transactionTypes = [\"deposit\", \"withdrawal\"] as const;\ntype TransactionType = typeof transactionTypes[number];\nexport type Transaction = {\n  id: string;\n  date: string;\n  value: number;\n  type: TransactionType;\n};\nexport const transactionFilters = [\"all\", \"deposit\", \"withdrawal\"] as const;\nexport type TransactionView = typeof transactionFilters[number];\n\nexport type State = {\n  overdraft: number;\n  transactions: { [id: string]: Transaction };\n  transactionFilter: TransactionView;\n};\n\nconst initialState = (): State => ({\n  overdraft: 250,\n  transactions: {},\n  transactionFilter: \"all\"\n});\n\nexport const reducer = (state: State = initialState(), action: Action): State =>\n  produce(state, next => {\n    switch (action.type) {\n      case \"transaction clicked in list\": {\n        delete next.transactions[action.payload.transaction.id];\n        break;\n      }\n      case \"transaction filter changed\": {\n        next.transactionFilter = action.payload;\n        break;\n      }\n      case \"transaction confirmed (saga)\": {\n        next.transactions[action.payload.transaction.id] =\n          action.payload.transaction;\n        break;\n      }\n    }\n  });\n\nexport const selectTransactionsLatestToOldest = createSelector(\n  [(s: State) => s.transactions],\n  transactions => {\n    return Object.values(transactions).sort((a, b) =>\n      a.date > b.date ? -1 : 1\n    );\n  }\n);\n\nexport const selectFilteredTransactions = createSelector(\n  [selectTransactionsLatestToOldest, (s: State) => s.transactionFilter],\n  (transactions, filter) => {\n    return filter === \"all\"\n      ? transactions\n      : transactions.filter(transaction => transaction.type === filter);\n  }\n);\n\nexport const selectBalance = createSelector(\n  [selectTransactionsLatestToOldest],\n  transactions =>\n    transactions.reduce(\n      (balance, transaction) =>\n        balance +\n        (transaction.type === \"withdrawal\"\n          ? -transaction.value\n          : transaction.value),\n      0\n    )\n);\n\nexport const selectOverdraft = createSelector(\n  [(state: State) => state.overdraft],\n  overdraft => overdraft\n);\n\nexport const selectBalancesByTime = createSelector(\n  [selectFilteredTransactions],\n  transactions => {\n    const keyFormat = \"yyyy MM dd\";\n    const daysToDisplay = 14;\n    return new Array(daysToDisplay)\n      .fill(null)\n      .map((_, i) => {\n        const group = format(\n          i === 0 ? new Date() : subDays(new Date(), i),\n          keyFormat\n        );\n        return {\n          group,\n          total: transactions\n            .filter(({ date }) => format(new Date(date), keyFormat) === group)\n            .reduce(\n              (total, { value, type }) =>\n                total + (type === \"withdrawal\" ? -value : value),\n              0\n            )\n        };\n      })\n      .reverse();\n  }\n);\n","import { put, takeLatest, select, call } from \"redux-saga/effects\";\nimport { v4 as uuid } from \"uuid\";\nimport { Action, selectBalance, Transaction, selectOverdraft } from \"./state\";\n\nexport function* rootSaga() {\n  yield takeLatest<Action>(\"add transaction form submitted\", handleTransaction);\n}\n\nfunction* handleTransaction({ payload }: any) {\n  const balance = yield select(selectBalance);\n  const overdraft = yield select(selectOverdraft);\n  const { transaction }: { transaction: Transaction } = payload;\n  if (\n    transaction.type === \"withdrawal\" &&\n    balance - transaction.value < -overdraft\n  ) {\n    yield put<Action>({\n      type: \"transaction rejected (saga)\",\n      payload: {\n        reason: \"Overdraft exceeded.\"\n      }\n    });\n    yield call(alert, \"Transaction failed. Overdraft would be exceeded!\");\n  } else {\n    yield put<Action>({\n      type: \"transaction confirmed (saga)\",\n      payload: {\n        transaction: { ...transaction, id: uuid() }\n      }\n    });\n  }\n}\n","import { Dispatch, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { reducer, State, Action } from \"./state\";\nimport { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { rootSaga } from \"./saga\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(\n  {\n    key: \"root\",\n    storage\n  },\n  reducer\n);\nexport const store = createStore(\n  persistedReducer,\n  applyMiddleware(sagaMiddleware)\n);\n// @ts-ignore - probably incompatible typescript actions\nexport const persistor = persistStore(store);\n\nexport const useTypedSelector: TypedUseSelectorHook<State> = useSelector;\nexport const useTypedDispatch = useDispatch as () => Dispatch<Action>;\n\nasync function start() {\n  sagaMiddleware.run(rootSaga);\n}\nstart();\n","import React from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\ntype Props = {\n  value: string;\n  label: string;\n  checked: boolean;\n  onClick: (value: string) => void;\n};\n\nexport function Radio({ value, checked, label, onClick }: Props) {\n  const id = `${uuid()}-${value}`;\n  return (\n    <div style={{ flexDirection: \"row\", justifyContent: \"center\" }}>\n      <div style={{ padding: 5, flexDirection: \"row\", alignItems: \"center\" }}>\n        <label htmlFor={id} style={{ paddingRight: 5 }}>\n          {label}\n        </label>\n        <input\n          id={id}\n          type=\"radio\"\n          checked={checked}\n          onChange={() => void onClick(value)}\n        />\n      </div>\n    </div>\n  );\n}\n","export const theme = {\n  primary: \"#7346fe\",\n  secondary: \"#67e2cd\",\n  subtle: \"#414141\",\n  fg: \"black\",\n  bg: \"rgb(232,232,232)\",\n  gutter: 10,\n  space: 10\n};\n","import styled from \"styled-components\";\nimport { theme } from \"./theme\";\n\nexport const Max = styled.div`\n  width: 100%;\n  height: 100%;\n  flex: 1 1 100%;\n`;\n\nexport const CentredMax = styled(Max)`\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Space = styled.div`\n  flex: 0 0 ${theme.gutter}px;\n`;\n","import { theme } from \"./theme\";\nimport styled from \"styled-components\";\n\ntype TextLevel = \"heading\" | \"subheading\" | \"normal\" | \"subtle\";\n\nexport const Text = styled.span<{ level: TextLevel }>`\n  opacity: ${({ level }) => (level === \"subtle\" ? 0.8 : 1)};\n  font-style: ${({ level }) => (level === \"subtle\" ? \"italic\" : \"normal\")};\n  text-shadow: ${({ level }) =>\n    level === \"heading\" ? \"0px 5px 3px #eaeaea\" : \"none\"};\n  color: ${({ level }) => getTextColor(level)};\n  font-size: ${({ level }) => getFontSize(level)};\n`;\n\nconst getFontSize = (level: TextLevel) => {\n  switch (level) {\n    case \"heading\": {\n      return \"3rem\";\n    }\n    case \"subheading\": {\n      return \"1.5rem\";\n    }\n    case \"subtle\":\n    case \"normal\": {\n      return \"1rem\";\n    }\n  }\n};\n\nconst getTextColor = (level: TextLevel): string => {\n  switch (level) {\n    case \"heading\": {\n      return theme.primary;\n    }\n    case \"subheading\": {\n      return theme.subtle;\n    }\n    case \"normal\": {\n      return theme.fg;\n    }\n    case \"subtle\": {\n      return theme.subtle;\n    }\n  }\n};\n","import * as React from \"react\";\nimport { Text } from \"./Text\";\nimport { Transaction } from \"./state\";\nimport { CentredMax, Space } from \"./Layout\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { theme } from \"./theme\";\nimport styled from \"styled-components\";\n\nexport function TransactionDisplay({\n  transaction,\n  onClick\n}: {\n  transaction: Transaction;\n  onClick: (transaction: Transaction) => void;\n}) {\n  return (\n    <Container onClick={() => void onClick(transaction)}>\n      <TransactionDate level=\"subtle\">\n        {formatDistanceToNow(new Date(transaction.date), { addSuffix: true })}\n      </TransactionDate>\n      <div style={{ flexDirection: \"row\" }}>\n        <Text level=\"normal\">£{transaction.value.toFixed(2)}</Text>\n        <Space />\n        <Text level=\"normal\">{transaction.type}</Text>\n      </div>\n    </Container>\n  );\n}\n\nconst Container = styled(CentredMax)`\n  align-items: flex-start;\n  padding: ${theme.gutter}px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n`;\n\nconst TransactionDate = styled(Text)`\n  align-self: flex-end;\n`;\n","import React from \"react\";\nimport { useTypedSelector, useTypedDispatch } from \"./store\";\nimport { selectTransactionsLatestToOldest, transactionFilters } from \"./state\";\nimport { ResizeObserver } from \"@juggle/resize-observer\";\nimport useMeasure from \"react-use-measure\";\nimport { FixedSizeList } from \"react-window\";\nimport { Radio } from \"./Radio\";\nimport { theme } from \"./theme\";\nimport { CentredMax, Space } from \"./Layout\";\nimport { TransactionDisplay } from \"./Transaction\";\nimport { Text } from \"./Text\";\n\ntype Props = {\n  transactionClicked: (item: any) => void;\n};\n\nexport function Transactions({ transactionClicked }: Props) {\n  const [ref, { width, height }] = useMeasure({\n    polyfill: ResizeObserver\n  });\n  const itemHeight = 100;\n  const transactions = useTypedSelector(selectTransactionsLatestToOldest);\n  return (\n    <CentredMax>\n      <TransactionsFilter />\n      <Space />\n      <CentredMax\n        ref={ref}\n        style={{ flex: 1, height: \"100%\", width: \"100%\", overflow: \"hidden\" }}\n      >\n        {transactions.length ? (\n          <FixedSizeList\n            itemCount={transactions.length}\n            itemSize={itemHeight}\n            width={width}\n            height={height}\n          >\n            {({ style, index }) => (\n              <div\n                key={transactions[index].id}\n                style={{\n                  ...style,\n                  width: \"100%\",\n                  borderBottomColor: theme.primary,\n                  borderBottomWidth: 5\n                }}\n              >\n                <TransactionDisplay\n                  onClick={() => void transactionClicked(transactions[index])}\n                  transaction={transactions[index]}\n                />\n              </div>\n            )}\n          </FixedSizeList>\n        ) : (\n          <Text level=\"subtle\">No Transactions.</Text>\n        )}\n      </CentredMax>\n    </CentredMax>\n  );\n}\n\nfunction TransactionsFilter() {\n  const dispatch = useTypedDispatch();\n  const activeFilter = useTypedSelector(state => state.transactionFilter);\n  return (\n    <div style={{ flexDirection: \"row\", justifyContent: \"center\" }}>\n      {transactionFilters.map(filter => (\n        <Radio\n          key={filter}\n          value={filter}\n          label={filter}\n          checked={activeFilter === filter}\n          onClick={() =>\n            void dispatch({\n              type: \"transaction filter changed\",\n              payload: filter\n            })\n          }\n        />\n      ))}\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { Text } from \"./Text\";\nimport { useTypedSelector } from \"./store\";\nimport { selectBalance } from \"./state\";\nimport styled from \"styled-components\";\nimport { animated, useSpring } from \"react-spring\";\n\nexport function Balance() {\n  const balance = useTypedSelector(selectBalance);\n  const { balanceSpring } = useSpring({\n    from: {\n      balanceSpring: 0\n    },\n    balanceSpring: balance,\n    config: {\n      clamp: true\n    }\n  });\n  return (\n    <Container>\n      <Text level=\"heading\">\n        £\n        <animated.span>\n          {balanceSpring.interpolate(x => x.toFixed(0))}\n        </animated.span>\n      </Text>\n      <Text level=\"subheading\">\n        {balance > 4000\n          ? \"Good job saving!\"\n          : balance < 0\n          ? \"You're using your overdraft!\"\n          : \"Keep it up!\"}\n      </Text>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  align-items: center;\n  padding-top: 20px;\n`;\n","import * as React from \"react\";\nimport { Text } from \"./Text\";\nimport { useTypedSelector } from \"./store\";\nimport { selectOverdraft } from \"./state\";\nimport styled from \"styled-components\";\n\nexport function Overdraft() {\n  const overdraft = useTypedSelector(selectOverdraft);\n\n  return (\n    <Container>\n      <Text level=\"subtle\">Agreed Overdaft £{overdraft}</Text>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  align-items: center;\n  padding-top: 20px;\n`;\n","import React from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { scaleLinear } from \"d3-scale\";\nimport { area, curveBasis as curve } from \"d3-shape\";\nimport { ResizeObserver } from \"@juggle/resize-observer\";\nimport useMeasure from \"react-use-measure\";\nimport { extent } from \"d3-array\";\nimport { Max } from \"./Layout\";\nimport { theme } from \"./theme\";\n\ntype Datum = {\n  step: number;\n  value: number;\n};\n\ntype Props = {\n  data: Datum[];\n};\n\nexport const Chart = React.memo(function({ data }: Props) {\n  const [ref, { width, height }] = useMeasure({\n    polyfill: ResizeObserver\n  });\n  const scaleX = scaleLinear()\n    .range([0, width])\n    .domain([0, data.length - 1]);\n  const scaleY = scaleLinear()\n    .range([height - 5, 5])\n    .domain(extent(data, x => x.value) as [number, number]);\n  const areaFn = area<Datum>()\n    .x(x => scaleX(x.step))\n    .x1(x => scaleX(x.step))\n    .y(height)\n    .y1(x => scaleY(x.value))\n    .curve(curve);\n  const { d } = useSpring({\n    d: areaFn(data)\n  });\n  return (\n    <Max ref={ref}>\n      <svg width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={theme.secondary} />\n            <stop offset=\"100%\" stopColor={theme.primary} />\n          </linearGradient>\n        </defs>\n        <animated.path fill=\"url(#gradient)\" d={d} />\n        <line\n          stroke=\"#8c8c8c\"\n          strokeWidth={3}\n          x1={0}\n          x2={width}\n          y1={scaleY(0)}\n          y2={scaleY(0)}\n        />\n      </svg>\n    </Max>\n  );\n});\n","import React from \"react\";\nimport { Chart } from \"./Chart\";\nimport { selectBalancesByTime } from \"./state\";\nimport { useTypedSelector } from \"./store\";\nimport { CentredMax } from \"./Layout\";\nimport { Text } from \"./Text\";\n\nexport function BalanceChart() {\n  const data = useTypedSelector(state =>\n    selectBalancesByTime(state).map(({ total }, i) => ({\n      step: i,\n      value: total\n    }))\n  );\n  return (\n    <CentredMax>\n      <Chart data={data} />\n      <Text level=\"subtle\">14 day history</Text>\n    </CentredMax>\n  );\n}\n","import styled from \"styled-components\";\nimport { theme } from \"./theme\";\n\nexport const Button = styled.button`\n  background: linear-gradient(15deg, ${theme.primary}, ${theme.secondary});\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  font-weight: bold;\n  font-size: 1rem;\n  color: white;\n`;\n","import * as React from \"react\";\nimport { Text } from \"./Text\";\nimport { Formik, Field, useField } from \"formik\";\nimport { theme } from \"./theme\";\nimport { useTypedDispatch } from \"./store\";\nimport { Transaction, transactionTypes } from \"./state\";\nimport { format, startOfDay } from \"date-fns\";\nimport { Button } from \"./Button\";\nimport { Radio } from \"./Radio\";\nimport { animated, useSpring } from \"react-spring\";\nimport { Space } from \"./Layout\";\n\nconst dateTimeInputFormat = \"yyyy-MM-dd'T'hh:mm\";\nconst initialValues: Omit<Transaction, \"id\"> = {\n  type: \"deposit\",\n  value: 0,\n  date: format(startOfDay(new Date()), dateTimeInputFormat)\n};\n\nexport function AddTransaction() {\n  const handleHeight = 50;\n  const [open, toggle] = React.useReducer(isOpen => !isOpen, false);\n  const dispatch = useTypedDispatch();\n  const { y } = useSpring({\n    y: open ? \"calc(0% - 0px)\" : `calc(100% - ${handleHeight}px)`\n  });\n  return (\n    <animated.div\n      style={{\n        position: \"fixed\",\n        bottom: 0,\n        flex: 0,\n        width: \"100%\",\n        justifyContent: \"center\",\n        background: \"rgba(0,0,0,0.1)\",\n        backdropFilter: \"blur(10px)\",\n        transform: y.interpolate(y => `translateY(${y})`)\n      }}\n    >\n      <div\n        onClick={() => void toggle()}\n        style={{\n          background: \"rgba(0,0,0,0.5)\",\n          width: \"100%\",\n          height: handleHeight,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: \"white\"\n        }}\n      >\n        {open ? \"Close\" : \"Add Transaction\"}\n      </div>\n      <div style={{ padding: theme.gutter }}>\n        <Text level=\"subheading\">Add Transaction</Text>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={transaction =>\n            void dispatch({\n              type: \"add transaction form submitted\",\n              payload: { transaction }\n            })\n          }\n        >\n          {({ values, handleSubmit }) => (\n            <div>\n              <TypePicker />\n              <Space />\n              <DatePicker />\n              <Space />\n              <div style={{ alignItems: \"center\" }}>\n                <Text level=\"subtle\">£{values.value}</Text>\n                <Field\n                  style={{ flex: 1, width: \"100%\" }}\n                  name=\"value\"\n                  type=\"range\"\n                  min={0}\n                  max={10000}\n                />\n              </div>\n              <Space />\n              <Button onClick={() => void handleSubmit()}>Add</Button>\n            </div>\n          )}\n        </Formik>\n      </div>\n    </animated.div>\n  );\n}\n\nfunction DatePicker() {\n  const [field, , helpers] = useField({\n    name: \"date\"\n  });\n  return (\n    <input\n      type=\"datetime-local\"\n      value={field.value}\n      max={format(new Date(), dateTimeInputFormat)}\n      onChange={e => void helpers.setValue(e.target.value)}\n    />\n  );\n}\n\nfunction TypePicker() {\n  const [field, , helpers] = useField({\n    name: \"type\"\n  });\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n      {transactionTypes.map(type => (\n        <Radio\n          value={type}\n          label={type}\n          key={type}\n          checked={type === field.value}\n          onClick={() => void helpers.setValue(type)}\n        />\n      ))}\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { Transactions } from \"./Transactions\";\nimport { useTypedDispatch } from \"./store\";\nimport { Balance } from \"./Balance\";\nimport { Overdraft } from \"./Overdraft\";\nimport { BalanceChart } from \"./BalanceChart\";\nimport { AddTransaction } from \"./AddTransaction\";\nimport { Max } from \"./Layout\";\n\nexport function Account() {\n  const dispatch = useTypedDispatch();\n  return (\n    <Max>\n      <Overdraft />\n      <Balance />\n      <div style={{ width: \"100%\", flex: \"0 0 10%\" }}>\n        <BalanceChart />\n      </div>\n      <Transactions\n        transactionClicked={transaction => {\n          dispatch({\n            type: \"transaction clicked in list\",\n            payload: {\n              transaction\n            }\n          });\n        }}\n      />\n      <AddTransaction />\n    </Max>\n  );\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./store\";\nimport { Account } from \"./Account\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Account />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}