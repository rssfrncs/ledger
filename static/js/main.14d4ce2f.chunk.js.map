{"version":3,"sources":["state.ts","saga.ts","store.ts","Radio.tsx","theme.ts","Layout.ts","Text.ts","Transaction.tsx","Transactions.tsx","Balance.tsx","Overdraft.tsx","Chart.tsx","BalanceChart.tsx","Button.tsx","AddTransaction.tsx","Account.tsx","App.tsx","index.tsx"],"names":["transactionTypes","transactionFilters","selectTransactionsLatestToOldest","createSelector","s","transactions","Object","values","sort","a","b","date","selectFilteredTransactionsLatestToOldest","transactionFilter","filter","transaction","type","selectBalance","reduce","balance","value","selectOverdraft","state","overdraft","selectBalancesByTime","Array","fill","map","_","i","group","format","Date","subDays","total","reverse","rootSaga","handleTransaction","takeLatest","payload","select","put","reason","call","alert","id","uuid","sagaMiddleware","createSagaMiddleware","persistedReducer","persistReducer","key","storage","action","produce","next","store","createStore","applyMiddleware","persistor","persistStore","useTypedSelector","useSelector","useTypedDispatch","useDispatch","run","start","Radio","checked","label","onClick","style","flexDirection","justifyContent","padding","alignItems","htmlFor","paddingRight","onChange","theme","Max","styled","div","CentredMax","Space","Text","span","level","getTextColor","getFontSize","TransactionDisplay","Container","TransactionDate","formatDistanceToNow","addSuffix","toFixed","Transactions","transactionClicked","useMeasure","polyfill","ResizeObserver","ref","width","height","TransactionsFilter","flex","overflow","length","itemCount","itemSize","index","borderBottomColor","borderBottomWidth","dispatch","activeFilter","Balance","balanceSpring","useSpring","from","config","clamp","interpolate","x","Overdraft","Chart","React","memo","data","scaleX","scaleLinear","range","domain","scaleY","extent","allZero","every","areaFn","area","step","x1","y","y1","curve","d","viewBox","x2","y2","offset","stopColor","path","BalanceChart","Button","button","initialValues","startOfDay","AddTransaction","isOpen","open","toggle","position","bottom","background","backdropFilter","transform","color","onSubmit","handleSubmit","TypePicker","DatePicker","name","min","max","useField","field","helpers","e","setValue","target","display","Account","App","loading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14d4ce2f.chunk.js","sourcesContent":["import produce from \"immer\";\r\nimport { createSelector } from \"reselect\";\r\nimport { subDays, format } from \"date-fns\";\r\n\r\nexport type Action =\r\n  | {\r\n      type: \"transaction clicked in list\";\r\n      payload: {\r\n        transaction: Transaction;\r\n      };\r\n    }\r\n  | {\r\n      type: \"transaction filter changed\";\r\n      payload: TransactionView;\r\n    }\r\n  | {\r\n      type: \"add transaction form submitted\";\r\n      payload: { transaction: Omit<Transaction, \"id\"> };\r\n    }\r\n  | {\r\n      type: \"transaction confirmed (saga)\";\r\n      payload: { transaction: Transaction };\r\n    }\r\n  | {\r\n      type: \"transaction rejected (saga)\";\r\n      payload: {\r\n        reason: string;\r\n      };\r\n    };\r\n\r\nexport const transactionTypes = [\"deposit\", \"withdrawal\"] as const;\r\ntype TransactionType = typeof transactionTypes[number];\r\nexport type Transaction = {\r\n  id: string;\r\n  date: string;\r\n  value: number;\r\n  type: TransactionType;\r\n};\r\nexport const transactionFilters = [\"all\", \"deposit\", \"withdrawal\"] as const;\r\nexport type TransactionView = typeof transactionFilters[number];\r\n\r\nexport type State = {\r\n  overdraft: number;\r\n  transactions: { [id: string]: Transaction };\r\n  transactionFilter: TransactionView;\r\n};\r\n\r\nconst initialState = (): State => ({\r\n  overdraft: 250,\r\n  transactions: {},\r\n  transactionFilter: \"all\"\r\n});\r\n\r\nexport const reducer = (state: State = initialState(), action: Action): State =>\r\n  produce(state, next => {\r\n    switch (action.type) {\r\n      case \"transaction clicked in list\": {\r\n        delete next.transactions[action.payload.transaction.id];\r\n        break;\r\n      }\r\n      case \"transaction filter changed\": {\r\n        next.transactionFilter = action.payload;\r\n        break;\r\n      }\r\n      case \"transaction confirmed (saga)\": {\r\n        next.transactions[action.payload.transaction.id] =\r\n          action.payload.transaction;\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\nexport const selectTransactionsLatestToOldest = createSelector(\r\n  [(s: State) => s.transactions],\r\n  transactions => {\r\n    return Object.values(transactions).sort((a, b) =>\r\n      a.date > b.date ? -1 : 1\r\n    );\r\n  }\r\n);\r\n\r\nexport const selectFilteredTransactionsLatestToOldest = createSelector(\r\n  [selectTransactionsLatestToOldest, (s: State) => s.transactionFilter],\r\n  (transactions, filter) => {\r\n    return filter === \"all\"\r\n      ? transactions\r\n      : transactions.filter(transaction => transaction.type === filter);\r\n  }\r\n);\r\n\r\nexport const selectBalance = createSelector(\r\n  [selectTransactionsLatestToOldest],\r\n  transactions =>\r\n    transactions.reduce(\r\n      (balance, transaction) =>\r\n        balance +\r\n        (transaction.type === \"withdrawal\"\r\n          ? -transaction.value\r\n          : transaction.value),\r\n      0\r\n    )\r\n);\r\n\r\nexport const selectOverdraft = createSelector(\r\n  [(state: State) => state.overdraft],\r\n  overdraft => overdraft\r\n);\r\n\r\nexport const selectBalancesByTime = createSelector(\r\n  [selectFilteredTransactionsLatestToOldest],\r\n  transactions => {\r\n    const keyFormat = \"yyyy MM dd\";\r\n    const daysToDisplay = 14;\r\n    return new Array(daysToDisplay)\r\n      .fill(null)\r\n      .map((_, i) => {\r\n        const group = format(\r\n          i === 0 ? new Date() : subDays(new Date(), i),\r\n          keyFormat\r\n        );\r\n        return {\r\n          group,\r\n          total: transactions\r\n            .filter(({ date }) => format(new Date(date), keyFormat) === group)\r\n            .reduce(\r\n              (total, { value, type }) =>\r\n                total + (type === \"withdrawal\" ? -value : value),\r\n              0\r\n            )\r\n        };\r\n      })\r\n      .reverse();\r\n  }\r\n);\r\n","import { put, takeLatest, select, call } from \"redux-saga/effects\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Action, selectBalance, Transaction, selectOverdraft } from \"./state\";\r\n\r\nexport function* rootSaga() {\r\n  yield takeLatest<Action>(\"add transaction form submitted\", handleTransaction);\r\n}\r\n\r\nfunction* handleTransaction({ payload }: any) {\r\n  const balance = yield select(selectBalance);\r\n  const overdraft = yield select(selectOverdraft);\r\n  const { transaction }: { transaction: Transaction } = payload;\r\n  if (\r\n    transaction.type === \"withdrawal\" &&\r\n    balance - transaction.value < -overdraft\r\n  ) {\r\n    yield put<Action>({\r\n      type: \"transaction rejected (saga)\",\r\n      payload: {\r\n        reason: \"Overdraft exceeded.\"\r\n      }\r\n    });\r\n    yield call(alert, \"Transaction failed. Overdraft would be exceeded!\");\r\n  } else {\r\n    yield put<Action>({\r\n      type: \"transaction confirmed (saga)\",\r\n      payload: {\r\n        transaction: { ...transaction, id: uuid() }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Dispatch, createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { reducer, State, Action } from \"./state\";\r\nimport { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\r\nimport { rootSaga } from \"./saga\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst persistedReducer = persistReducer(\r\n  {\r\n    key: \"root\",\r\n    storage\r\n  },\r\n  reducer\r\n);\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  applyMiddleware(sagaMiddleware)\r\n);\r\n// @ts-ignore - probably incompatible typescript actions\r\nexport const persistor = persistStore(store);\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<State> = useSelector;\r\nexport const useTypedDispatch = useDispatch as () => Dispatch<Action>;\r\n\r\nasync function start() {\r\n  sagaMiddleware.run(rootSaga);\r\n}\r\nstart();\r\n","import React from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  label: string;\r\n  checked: boolean;\r\n  onClick: (value: string) => void;\r\n};\r\n\r\nexport function Radio({ value, checked, label, onClick }: Props) {\r\n  const id = `${uuid()}-${value}`;\r\n  return (\r\n    <div style={{ flexDirection: \"row\", justifyContent: \"center\" }}>\r\n      <div style={{ padding: 5, flexDirection: \"row\", alignItems: \"center\" }}>\r\n        <label htmlFor={id} style={{ paddingRight: 5 }}>\r\n          {label}\r\n        </label>\r\n        <input\r\n          id={id}\r\n          type=\"radio\"\r\n          checked={checked}\r\n          onChange={() => void onClick(value)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export const theme = {\r\n  primary: \"#7346fe\",\r\n  secondary: \"#67e2cd\",\r\n  subtle: \"#414141\",\r\n  fg: \"black\",\r\n  bg: \"rgb(232,232,232)\",\r\n  gutter: 10,\r\n  space: 10\r\n};\r\n","import styled from \"styled-components\";\r\nimport { theme } from \"./theme\";\r\n\r\nexport const Max = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  flex: 1 1 100%;\r\n`;\r\n\r\nexport const CentredMax = styled(Max)`\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Space = styled.div`\r\n  flex: 0 0 ${theme.gutter}px;\r\n`;\r\n","import { theme } from \"./theme\";\r\nimport styled from \"styled-components\";\r\n\r\ntype TextLevel = \"heading\" | \"subheading\" | \"normal\" | \"subtle\";\r\n\r\nexport const Text = styled.span<{ level: TextLevel }>`\r\n  opacity: ${({ level }) => (level === \"subtle\" ? 0.8 : 1)};\r\n  font-style: ${({ level }) => (level === \"subtle\" ? \"italic\" : \"normal\")};\r\n  text-shadow: ${({ level }) =>\r\n    level === \"heading\" ? \"0px 5px 3px #eaeaea\" : \"none\"};\r\n  color: ${({ level }) => getTextColor(level)};\r\n  font-size: ${({ level }) => getFontSize(level)};\r\n`;\r\n\r\nconst getFontSize = (level: TextLevel) => {\r\n  switch (level) {\r\n    case \"heading\": {\r\n      return \"3rem\";\r\n    }\r\n    case \"subheading\": {\r\n      return \"1.5rem\";\r\n    }\r\n    case \"subtle\":\r\n    case \"normal\": {\r\n      return \"1rem\";\r\n    }\r\n  }\r\n};\r\n\r\nconst getTextColor = (level: TextLevel): string => {\r\n  switch (level) {\r\n    case \"heading\": {\r\n      return theme.primary;\r\n    }\r\n    case \"subheading\": {\r\n      return theme.subtle;\r\n    }\r\n    case \"normal\": {\r\n      return theme.fg;\r\n    }\r\n    case \"subtle\": {\r\n      return theme.subtle;\r\n    }\r\n  }\r\n};\r\n","import * as React from \"react\";\r\nimport { Text } from \"./Text\";\r\nimport { Transaction } from \"./state\";\r\nimport { CentredMax, Space } from \"./Layout\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport { theme } from \"./theme\";\r\nimport styled from \"styled-components\";\r\n\r\nexport function TransactionDisplay({\r\n  transaction,\r\n  onClick\r\n}: {\r\n  transaction: Transaction;\r\n  onClick: (transaction: Transaction) => void;\r\n}) {\r\n  return (\r\n    <Container onClick={() => void onClick(transaction)}>\r\n      <TransactionDate level=\"subtle\">\r\n        {formatDistanceToNow(new Date(transaction.date), { addSuffix: true })}\r\n      </TransactionDate>\r\n      <div style={{ flexDirection: \"row\" }}>\r\n        <Text level=\"normal\">£{transaction.value.toFixed(2)}</Text>\r\n        <Space />\r\n        <Text level=\"normal\">{transaction.type}</Text>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled(CentredMax)`\r\n  align-items: flex-start;\r\n  padding: ${theme.gutter}px;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nconst TransactionDate = styled(Text)`\r\n  align-self: flex-end;\r\n`;\r\n","import React from \"react\";\r\nimport { useTypedSelector, useTypedDispatch } from \"./store\";\r\nimport {\r\n  selectFilteredTransactionsLatestToOldest,\r\n  transactionFilters\r\n} from \"./state\";\r\nimport { ResizeObserver } from \"@juggle/resize-observer\";\r\nimport useMeasure from \"react-use-measure\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport { Radio } from \"./Radio\";\r\nimport { theme } from \"./theme\";\r\nimport { CentredMax, Space } from \"./Layout\";\r\nimport { TransactionDisplay } from \"./Transaction\";\r\nimport { Text } from \"./Text\";\r\n\r\ntype Props = {\r\n  transactionClicked: (item: any) => void;\r\n};\r\n\r\nexport function Transactions({ transactionClicked }: Props) {\r\n  const [ref, { width, height }] = useMeasure({\r\n    polyfill: ResizeObserver\r\n  });\r\n  const itemHeight = 100;\r\n  const transactions = useTypedSelector(\r\n    selectFilteredTransactionsLatestToOldest\r\n  );\r\n  return (\r\n    <CentredMax>\r\n      <TransactionsFilter />\r\n      <Space />\r\n      <CentredMax\r\n        ref={ref}\r\n        style={{ flex: 1, height: \"100%\", width: \"100%\", overflow: \"hidden\" }}\r\n      >\r\n        {transactions.length ? (\r\n          <FixedSizeList\r\n            itemCount={transactions.length}\r\n            itemSize={itemHeight}\r\n            width={width}\r\n            height={height}\r\n          >\r\n            {({ style, index }) => (\r\n              <div\r\n                key={transactions[index].id}\r\n                style={{\r\n                  ...style,\r\n                  width: \"100%\",\r\n                  borderBottomColor: theme.primary,\r\n                  borderBottomWidth: 5\r\n                }}\r\n              >\r\n                <TransactionDisplay\r\n                  onClick={() => void transactionClicked(transactions[index])}\r\n                  transaction={transactions[index]}\r\n                />\r\n              </div>\r\n            )}\r\n          </FixedSizeList>\r\n        ) : (\r\n          <Text level=\"subtle\">No Transactions.</Text>\r\n        )}\r\n      </CentredMax>\r\n    </CentredMax>\r\n  );\r\n}\r\n\r\nfunction TransactionsFilter() {\r\n  const dispatch = useTypedDispatch();\r\n  const activeFilter = useTypedSelector(state => state.transactionFilter);\r\n  return (\r\n    <div style={{ flexDirection: \"row\", justifyContent: \"center\" }}>\r\n      {transactionFilters.map(filter => (\r\n        <Radio\r\n          key={filter}\r\n          value={filter}\r\n          label={filter}\r\n          checked={activeFilter === filter}\r\n          onClick={() =>\r\n            void dispatch({\r\n              type: \"transaction filter changed\",\r\n              payload: filter\r\n            })\r\n          }\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { Text } from \"./Text\";\r\nimport { useTypedSelector } from \"./store\";\r\nimport { selectBalance } from \"./state\";\r\nimport styled from \"styled-components\";\r\nimport { animated, useSpring } from \"react-spring\";\r\n\r\nexport function Balance() {\r\n  const balance = useTypedSelector(selectBalance);\r\n  const { balanceSpring } = useSpring({\r\n    from: {\r\n      balanceSpring: 0\r\n    },\r\n    balanceSpring: balance,\r\n    config: {\r\n      clamp: true\r\n    }\r\n  });\r\n  return (\r\n    <Container>\r\n      <Text level=\"heading\">\r\n        £\r\n        <animated.span>\r\n          {balanceSpring.interpolate(x => x.toFixed(0))}\r\n        </animated.span>\r\n      </Text>\r\n      <Text level=\"subheading\">\r\n        {balance > 4000\r\n          ? \"Good job saving!\"\r\n          : balance < 0\r\n          ? \"You're using your overdraft!\"\r\n          : \"Keep it up!\"}\r\n      </Text>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  align-items: center;\r\n  padding-top: 20px;\r\n`;\r\n","import * as React from \"react\";\r\nimport { Text } from \"./Text\";\r\nimport { useTypedSelector } from \"./store\";\r\nimport { selectOverdraft } from \"./state\";\r\nimport styled from \"styled-components\";\r\n\r\nexport function Overdraft() {\r\n  const overdraft = useTypedSelector(selectOverdraft);\r\n\r\n  return (\r\n    <Container>\r\n      <Text level=\"subtle\">Agreed Overdraft £{overdraft}</Text>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  align-items: center;\r\n  padding-top: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport { area, curveBasis as curve } from \"d3-shape\";\r\nimport { ResizeObserver } from \"@juggle/resize-observer\";\r\nimport useMeasure from \"react-use-measure\";\r\nimport { extent } from \"d3-array\";\r\nimport { Max } from \"./Layout\";\r\nimport { theme } from \"./theme\";\r\n\r\ntype Datum = {\r\n  step: number;\r\n  value: number;\r\n};\r\n\r\ntype Props = {\r\n  data: Datum[];\r\n};\r\n\r\nexport const Chart = React.memo(function({ data }: Props) {\r\n  const [ref, { width, height }] = useMeasure({\r\n    polyfill: ResizeObserver\r\n  });\r\n  const scaleX = scaleLinear()\r\n    .range([0, width])\r\n    .domain([0, data.length - 1]);\r\n  const scaleY = scaleLinear()\r\n    .range([height - 5, 5])\r\n    .domain(extent(data, x => x.value) as [number, number]);\r\n  // check if there are no values so that we can change how we render the area\r\n  // when true render zero height around scaleY(0)\r\n  const allZero = data.every(data => data.value === 0);\r\n  const areaFn = area<Datum>()\r\n    .x(x => scaleX(x.step))\r\n    .x1(x => scaleX(x.step))\r\n    .y(allZero ? scaleY(0) : height)\r\n    .y1(x => (allZero ? scaleY(0) : scaleY(x.value)))\r\n    .curve(curve);\r\n  const { d } = useSpring({\r\n    d: areaFn(data)\r\n  });\r\n  return (\r\n    <Max ref={ref}>\r\n      <svg width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\r\n        <defs>\r\n          <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0\" y2=\"100%\">\r\n            <stop offset=\"0%\" stopColor={theme.secondary} />\r\n            <stop offset=\"100%\" stopColor={theme.primary} />\r\n          </linearGradient>\r\n        </defs>\r\n        <animated.path fill=\"url(#gradient)\" d={d} />\r\n        <rect fill=\"#8c8c8c\" height={3} x={0} width={width} y={scaleY(0)} />\r\n      </svg>\r\n    </Max>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { Chart } from \"./Chart\";\r\nimport { selectBalancesByTime } from \"./state\";\r\nimport { useTypedSelector } from \"./store\";\r\nimport { CentredMax } from \"./Layout\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport function BalanceChart() {\r\n  const data = useTypedSelector(state =>\r\n    selectBalancesByTime(state).map(({ total }, i) => ({\r\n      step: i,\r\n      value: total\r\n    }))\r\n  );\r\n  return (\r\n    <CentredMax>\r\n      <Chart data={data} />\r\n      <Text level=\"subtle\">14 day history</Text>\r\n    </CentredMax>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\nimport { theme } from \"./theme\";\r\n\r\nexport const Button = styled.button`\r\n  background: linear-gradient(15deg, ${theme.primary}, ${theme.secondary});\r\n  padding: 10px 15px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  font-size: 1rem;\r\n  color: white;\r\n`;\r\n","import * as React from \"react\";\r\nimport { Text } from \"./Text\";\r\nimport { Formik, Field, useField } from \"formik\";\r\nimport { theme } from \"./theme\";\r\nimport { useTypedDispatch } from \"./store\";\r\nimport { Transaction, transactionTypes } from \"./state\";\r\nimport { format, startOfDay } from \"date-fns\";\r\nimport { Button } from \"./Button\";\r\nimport { Radio } from \"./Radio\";\r\nimport { animated, useSpring } from \"react-spring\";\r\nimport { Space } from \"./Layout\";\r\n\r\nconst dateTimeInputFormat = \"yyyy-MM-dd'T'hh:mm\";\r\nconst initialValues: Omit<Transaction, \"id\"> = {\r\n  type: \"deposit\",\r\n  value: 0,\r\n  date: format(startOfDay(new Date()), dateTimeInputFormat)\r\n};\r\n\r\nexport function AddTransaction() {\r\n  const handleHeight = 50;\r\n  const [open, toggle] = React.useReducer(isOpen => !isOpen, false);\r\n  const dispatch = useTypedDispatch();\r\n  const { y } = useSpring({\r\n    y: open ? \"calc(0% - 0px)\" : `calc(100% - ${handleHeight}px)`\r\n  });\r\n  return (\r\n    <animated.div\r\n      style={{\r\n        position: \"fixed\",\r\n        bottom: 0,\r\n        flex: 0,\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        background: \"rgba(0,0,0,0.1)\",\r\n        backdropFilter: \"blur(10px)\",\r\n        transform: y.interpolate(y => `translateY(${y})`)\r\n      }}\r\n    >\r\n      <div\r\n        onClick={() => void toggle()}\r\n        style={{\r\n          background: \"rgba(0,0,0,0.5)\",\r\n          width: \"100%\",\r\n          height: handleHeight,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          color: \"white\"\r\n        }}\r\n      >\r\n        {open ? \"Close\" : \"Add Transaction\"}\r\n      </div>\r\n      <div style={{ padding: theme.gutter }}>\r\n        <Text level=\"subheading\">Add Transaction</Text>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={transaction =>\r\n            void dispatch({\r\n              type: \"add transaction form submitted\",\r\n              payload: { transaction }\r\n            })\r\n          }\r\n        >\r\n          {({ values, handleSubmit }) => (\r\n            <div>\r\n              <TypePicker />\r\n              <Space />\r\n              <DatePicker />\r\n              <Space />\r\n              <div style={{ alignItems: \"center\" }}>\r\n                <Text level=\"subtle\">£{values.value}</Text>\r\n                <Field\r\n                  style={{ flex: 1, width: \"100%\" }}\r\n                  name=\"value\"\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={10000}\r\n                />\r\n              </div>\r\n              <Space />\r\n              <Button onClick={() => void handleSubmit()}>Add</Button>\r\n            </div>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nfunction DatePicker() {\r\n  const [field, , helpers] = useField({\r\n    name: \"date\"\r\n  });\r\n  return (\r\n    <input\r\n      type=\"datetime-local\"\r\n      value={field.value}\r\n      max={format(new Date(), dateTimeInputFormat)}\r\n      onChange={e => void helpers.setValue(e.target.value)}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TypePicker() {\r\n  const [field, , helpers] = useField({\r\n    name: \"type\"\r\n  });\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n      {transactionTypes.map(type => (\r\n        <Radio\r\n          value={type}\r\n          label={type}\r\n          key={type}\r\n          checked={type === field.value}\r\n          onClick={() => void helpers.setValue(type)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { Transactions } from \"./Transactions\";\r\nimport { useTypedDispatch } from \"./store\";\r\nimport { Balance } from \"./Balance\";\r\nimport { Overdraft } from \"./Overdraft\";\r\nimport { BalanceChart } from \"./BalanceChart\";\r\nimport { AddTransaction } from \"./AddTransaction\";\r\nimport { Max } from \"./Layout\";\r\n\r\nexport function Account() {\r\n  const dispatch = useTypedDispatch();\r\n  return (\r\n    <Max>\r\n      <Overdraft />\r\n      <Balance />\r\n      <div style={{ width: \"100%\", flex: \"0 0 10%\" }}>\r\n        <BalanceChart />\r\n      </div>\r\n      <Transactions\r\n        transactionClicked={transaction => {\r\n          dispatch({\r\n            type: \"transaction clicked in list\",\r\n            payload: {\r\n              transaction\r\n            }\r\n          });\r\n        }}\r\n      />\r\n      <AddTransaction />\r\n    </Max>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { store, persistor } from \"./store\";\r\nimport { Account } from \"./Account\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <Account />\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}